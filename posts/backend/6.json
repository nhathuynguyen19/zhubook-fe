{
  "id": "6",
  "slug": "building-a-restful-api-with-nodejs",
  "title": "Building a RESTful API with Node.js",
  "excerpt": "A step-by-step guide to creating a RESTful API using Node.js and Express.",
  "date": "2025-03-28",
  "readTime": "12 min read",
  "content": "<p>RESTful APIs are the backbone of modern web applications. In this guide, I'll walk you through building a robust API with Node.js and Express.</p><h2>Setting Up Your Project</h2><p>First, initialize a new Node.js project and install the necessary dependencies:</p><pre><code>mkdir my-rest-api\ncd my-rest-api\nnpm init -y\nnpm install express mongoose dotenv</code></pre><h2>Creating the Express Application</h2><p>Next, set up your basic Express application:</p><pre><code>// app.js
const express = require('express');
const mongoose = require('mongoose');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(express.json());n());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

// Routes
app.use('/api/users', require('./routes/users'));

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));</code></pre><h2>Defining Models</h2><p>Create a model for your data:</p><pre><code>// models/User.js
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    required: true
  },
  date: {
    type: Date,
    default: Date.now
  }
});

module.exports = mongoose.model('User', UserSchema);</code></pre><h2>Creating Routes</h2><p>Define your API endpoints:</p><pre><code>// routes/users.js
const express = require('express');
const router = express.Router();
const User = require('../models/User');

// Get all users
router.get('/', async (req, res) => {
  try {
    const users = await User.find().select('-password');
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get single user
router.get('/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select('-password');
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.json(user);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Create user
router.post('/', async (req, res) => {
  const user = new User({
    name: req.body.name,
    email: req.body.email,
    password: req.body.password // In a real app, hash this!
  });

  try {
    const newUser = await user.save();
    res.status(201).json(newUser);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Update user
router.put('/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    if (req.body.name) user.name = req.body.name;
    if (req.body.email) user.email = req.body.email;
    
    const updatedUser = await user.save();
    res.json(updatedUser);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Delete user
router.delete('/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    await user.remove();
    res.json({ message: 'User deleted' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;</code></pre><h2>Testing Your API</h2><p>Use tools like Postman or curl to test your endpoints. For example:</p><pre><code>curl -X GET http://localhost:5000/api/users\ncurl -X POST http://localhost:5000/api/users -H \"Content-Type: application/json\" -d '{\"name\":\"John Doe\",\"email\":\"john@example.com\",\"password\":\"password123\"}'</code></pre><p>By following these steps, you've created a fully functional RESTful API with Node.js and Express that supports all CRUD operations. In a production environment, you'd want to add authentication, validation, and error handling.</p>",
  "author": {
    "name": "John Doe",
    "image": "/placeholder.svg?height=40&width=40",
    "bio": "Web Developer & Technical Writer"
  }
}
